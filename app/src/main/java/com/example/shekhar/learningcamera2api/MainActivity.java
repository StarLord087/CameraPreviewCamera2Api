package com.example.shekhar.learningcamera2api;

import android.Manifest;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.os.Build;
import android.os.Handler;
import android.os.HandlerThread;
import android.support.annotation.NonNull;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Size;
import android.view.Surface;
import android.view.TextureView;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class MainActivity extends AppCompatActivity {
    //setup TextureView first thing
    private TextureView mtextureView;
    //Create SurefaceTextureListener
    //get width and height of the textureView
    private TextureView.SurfaceTextureListener mSurfaceTextureListener = new TextureView.SurfaceTextureListener() {
        //Autogenereated by studio
        @Override
        public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
            setupCamera(width, height);
            //Create openCameraCreate method after StateCallback
            openCamera();

        }

        @Override
        public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {

        }

        @Override
        public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
            return false;
        }

        @Override
        public void onSurfaceTextureUpdated(SurfaceTexture surface) {

        }
    };

    private CaptureRequest mPreviewCaptureRequest;
    private CaptureRequest.Builder mPreviewCaptureRequestBuilder;

    private CameraCaptureSession mCameraCaptureSession;
    private CameraCaptureSession.CaptureCallback mSessionCaptureCallback = new CameraCaptureSession.CaptureCallback() {
        @Override
        public void onCaptureStarted(@NonNull CameraCaptureSession session, @NonNull CaptureRequest request, long timestamp, long frameNumber) {
            super.onCaptureStarted(session, request, timestamp, frameNumber);
        }
    };

    private HandlerThread mBackgroundThread;
    private Handler mBackgroundHandler;



    private Size mPreviewSize;
    private String mcameraId;
    public static final int CAMERA_PERMISSION_CODE = 111;

    //Create Camera Device
    CameraDevice mCameraDevice;

    //Create statecallback for the camera
    CameraDevice.StateCallback mCameraDeviceStateCallback = new CameraDevice.StateCallback()
            //AutoGenerated by studio
    {
        @Override
        public void onOpened(@NonNull CameraDevice camera) {
            mCameraDevice = camera;
            createCameraPreviewSession();
            Toast.makeText(MainActivity.this, "Camera Opened", Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onDisconnected(@NonNull CameraDevice camera) {
            camera.close();
            mCameraDevice = null;
        }

        @Override
        public void onError(@NonNull CameraDevice camera, int error) {
            camera.close();
            mCameraDevice = null;
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mtextureView = (TextureView) findViewById(R.id.textureView);
    }

    @Override
    public void onResume() {
        super.onResume();

        openBackgroundThread();

        if (mtextureView.isAvailable()) {
            setupCamera(mtextureView.getWidth(),mtextureView.getHeight());
            openCamera();
        } else {
            //setup Texture Listener
            mtextureView.setSurfaceTextureListener(mSurfaceTextureListener);
        }
    }
    @Override
    protected void onPause() {

        closeCamera();

        closeBackgroundThread();
        super.onPause();
    }

    public void setupCamera(int width, int height) {
        //when we need to access the camera resources we need CameraManager
        //setup CameraManager
        CameraManager cameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);
        //with cameraManager we can get info like how many cameras does a device have
        try {
            for (String cameraId : cameraManager.getCameraIdList()) {
                //getCameraIdList returns a list of all the cameras on the device
                CameraCharacteristics cameraCharacteristics = cameraManager.getCameraCharacteristics(cameraId);
                //CameraCharacteristics returns various charateristics of camera
                //here we are using it to find out whether the camera is front facing or back facing
                if (cameraCharacteristics.get(CameraCharacteristics.LENS_FACING) == CameraCharacteristics.LENS_FACING_FRONT) {
                    continue;
                    //if camera is front it will skip that with "continue;"
                }
                //streamConfigurationmap has the sizes of the previews
                StreamConfigurationMap map = cameraCharacteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
                mPreviewSize = getPreferedPreviewSize(map.getOutputSizes(SurfaceTexture.class), width, height);
                mcameraId = cameraId;
                return;
            }
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }
    }

    private Size getPreferedPreviewSize(Size[] mapSizes, int width, int height) {
        //we will create a list of sizes that hold the contents of map just to be loaded up with the closest size
        // to our preview

        List<Size> collectoreSize = new ArrayList<>();
        // a for loop that can traverse trough mapSizes arguement
        for (Size option : mapSizes) {

            if (width > height) {
                //checking if the options width and height is greater than the desired width and height of the desired TextureView
                if (option.getWidth() > width && option.getHeight() > height) {
                    //if condition is true push that on to collectorSize
                    collectoreSize.add(option);

                }
            } else {
                if (option.getWidth() > height && option.getHeight() > width) {
                    collectoreSize.add(option);
                }
            }

        }

        if (collectoreSize.size() > 0) {
            return Collections.min(collectoreSize, new Comparator<Size>() {
                @Override
                public int compare(Size lhs, Size rhs) {

                    return Long.signum(lhs.getWidth() * lhs.getHeight() - rhs.getWidth() * rhs.getHeight());
                }
            });
        }
        return mapSizes[0];
    }

    private void openCamera() {
        //get CameraManager Object
        CameraManager cameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);
        //openCamera

        try {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                if (ContextCompat.checkSelfPermission(getApplicationContext(), Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {

                    //null is because we are using the UI thread
                    cameraManager.openCamera(mcameraId, mCameraDeviceStateCallback, mBackgroundHandler);
                } else {
                    if (shouldShowRequestPermissionRationale(Manifest.permission.CAMERA)) {
                        Toast.makeText(this, "Requies Camera Permission to work", Toast.LENGTH_SHORT).show();
                    }

                    requestPermissions(new String[]{Manifest.permission.CAMERA}, CAMERA_PERMISSION_CODE);
                }
            } else {
                cameraManager.openCamera(mcameraId, mCameraDeviceStateCallback, mBackgroundHandler);
            }
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }

    }

    private void closeCamera(){

        if(mCameraCaptureSession != null){
            mCameraCaptureSession.close();
            mCameraCaptureSession= null;
        }

        if(mCameraDevice != null){
            mCameraDevice.close();
            mCameraDevice = null;
        }

    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == CAMERA_PERMISSION_CODE) {
            if (grantResults[0] != PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "Camera Permission required", Toast.LENGTH_SHORT).show();
            }
        }
    }

    //creating preview
    private void createCameraPreviewSession() {
        //all fucntionality like capture an image or show a preview is done by implementation of a surface
        //we need to attach the textureView to the surface


        //Create SurfaceTexture

        SurfaceTexture surfaceTexture = mtextureView.getSurfaceTexture();
        surfaceTexture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());

        Surface previewSurface = new Surface(surfaceTexture);

        try {
            mPreviewCaptureRequestBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
            mPreviewCaptureRequestBuilder.addTarget(previewSurface);

            mCameraDevice.createCaptureSession(Arrays.asList(previewSurface), new CameraCaptureSession.StateCallback() {
                @Override
                public void onConfigured(@NonNull CameraCaptureSession session) {
                    if (mCameraDevice == null) {
                        return;
                    }
                    try {
                        mPreviewCaptureRequest = mPreviewCaptureRequestBuilder.build();
                        mCameraCaptureSession = session;
                        mCameraCaptureSession.setRepeatingRequest(mPreviewCaptureRequest, mSessionCaptureCallback, mBackgroundHandler);
                    } catch (CameraAccessException e) {
                        e.printStackTrace();
                    }
                }

                @Override
                public void onConfigureFailed(@NonNull CameraCaptureSession session) {
                    Toast.makeText(MainActivity.this, "Create camera Session Failed", Toast.LENGTH_SHORT).show();
                }
            }, null);
        } catch (CameraAccessException e) {
            e.printStackTrace();
        }


    }



    private void openBackgroundThread(){
        mBackgroundThread = new HandlerThread("camera2 Background Thread");
        mBackgroundThread.start();
        mBackgroundHandler = new Handler(mBackgroundThread.getLooper());
    }

    private void closeBackgroundThread(){
        mBackgroundThread.quitSafely();

        try {
            mBackgroundThread.join();
            mBackgroundThread = null;
            mBackgroundHandler = null;
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
